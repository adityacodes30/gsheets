/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var strided2array2d = require( '@stdlib/array-base-strided2array2d' );
var numel = require( '@stdlib/ndarray-base-numel' );


// MAIN //

/**
* Converts an ndarray to a range.
*
* @param {Array} buf - linear ndarray buffer for storing header info and containing ndarray data
* @param {integer} capacity - number of elements available in the buffer to store ndarray data
* @param {string} dtype - ndarray data type
* @param {Array<integer>} shape - ndarray shape
* @param {Array<integer>} strides - ndarray strides
* @param {integer} offset - ndarray index offset
* @param {string} order - ndarray memory layout order
* @param {string} layout - string specifying the presentation layout
* @returns {Array<Array>} range
*/
function ndarray2range( buf, capacity, dtype, shape, strides, offset, order, layout ) { // eslint-disable-line max-len
	var ptr;
	var i;

	// Initialize an index variable:
	ptr = 0;

	// Set the first element which should always be "ndarray" in order to indicate that subsequent elements in the output range correspond to ndarray data:
	buf[ ptr ] = 'ndarray';
	ptr += 1;

	// Set the "shape" field whose values specify the size of each ndarray dimension (for zero-dimensional ndarrays, the shape field is empty):
	buf[ ptr ] = 'shape';
	ptr += 1;
	for ( i = 0; i < shape.length; i++ ) {
		buf[ ptr ] = shape[ i ];
		ptr += 1;
	}

	// Set the "strides" field whose values specify the index increments for iterating over ndarray dimensions:
	buf[ ptr ] = 'strides';
	ptr += 1;
	for ( i = 0; i < strides.length; i++ ) {
		buf[ ptr ] = strides[ i ];
		ptr += 1;
	}

	// Set the "offset" field whose value specifies the index offset **relative to the start** of the "data" field for the first index element in the ndarray:
	buf[ ptr ] = 'offset';
	ptr += 1;
	buf[ ptr ] = offset;
	ptr += 1;

	// Set the "order" field whose value indicates whether the ndarray memory layout (either "row-major" or "column-major"):
	buf[ ptr ] = 'order';
	ptr += 1;
	buf[ ptr ] = order;
	ptr += 1;

	// Set the "dtype" field whose value indicates the data type for each element in the "data" field:
	buf[ ptr ] = 'dtype';
	ptr += 1;
	buf[ ptr ] = dtype;
	ptr += 1;

	// Set the "length" field whose value indicates how many values in the "data" field are indexed by the ndarray (for zero-dimensional ndarrays, the length is 1):
	buf[ ptr ] = 'length';
	ptr += 1;
	buf[ ptr ] = ( shape.length === 0 ) ? 1 : numel( shape );
	ptr += 1;

	// Set the "capacity" field whose value indicates the number of elements in the underlying data buffer for which the ndarray is a view:
	buf[ ptr ] = 'capacity';
	ptr += 1;
	buf[ ptr ] = capacity;
	ptr += 1;

	// Set the "data" field name which marks the beginning of the ndarray's underlying data buffer:
	buf[ ptr ] = 'data';

	// If the presentation layout is "row", we can avoid copying data to a nested array, allowing for better performance...
	if ( layout === 'row' ) {
		return [ buf ];
	}
	// layout === 'column'
	return strided2array2d( buf, [ buf.length, 1 ], [ 1, 1 ], 0 );
}


// EXPORTS //

module.exports = ndarray2range;
