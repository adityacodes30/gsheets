/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nditerMatrixEntries = require( '@stdlib/ndarray-iter-matrix-entries' );
var strided2array2d = require( '@stdlib/array-base-strided2array2d' );
var filled = require( '@stdlib/array-base-filled' );


// FUNCTIONS //

/**
* Returns a stacked representation for a zero-dimensional ndarray.
*
* @private
* @param {Object} x - input ndarray range object
* @returns {Array<Array<string>>} stacked representation
*/
function stacked0d( x ) {
	return [
		[ '[ ] =' ],
		[ '' ],
		[ x.ndarray.get() ]
	];
}

/**
* Returns a stacked representation for a one-dimensional ndarray.
*
* @private
* @param {Object} x - input ndarray range object
* @returns {Array<Array<string>>} stacked representation
*/
function stacked1d( x ) {
	var out = [
		[ '[ : ] =' ],
		[ '' ]
	];
	if ( x.length === 0 ) {
		out.push( [ '(empty)' ] );
		return out;
	}
	return out.concat( strided2array2d( x.ndarray.data, [ x.length, 1 ], [ x.strides[0], 1 ], x.ndarray.offset ) ); // eslint-disable-line max-len
}

/**
* Returns a stacked representation for a two-dimensional ndarray.
*
* @private
* @param {Object} x - input ndarray range object
* @returns {Array<Array<string>>} stacked representation
*/
function stacked2d( x ) {
	var out = [
		[ '[ :, : ] =' ],
		[ '' ]
	];
	if ( x.length === 0 ) {
		out.push( [ '(empty)' ] );
		return out;
	}
	return out.concat( strided2array2d( x.ndarray.data, x.shape, x.strides, x.ndarray.offset ) ); // eslint-disable-line max-len
}

/**
* Returns an array representing an empty line.
*
* @private
* @param {NonNegativeInteger} N - number of elements
* @returns {Array<string>} output array
*
* @example
* var line = emptyLine( 5 );
* // returns [ '', '', '', '', '' ]
*/
function emptyLine( N ) {
	return filled( '', N );
}

/**
* Generates a matrix slice string.
*
* @private
* @param {Array<number|null>} idx - Cartesian index
* @returns {string} slice string
*
* @example
* var str = sliceString( [ 0, 0, null, null ] );
* // returns '0, 0, :, :'
*/
function sliceString( idx ) {
	var ndims;
	var last;
	var out;
	var i;
	var j;

	ndims = idx.length;
	last = ndims - 1;
	j = ndims - 2;

	out = '';
	for ( i = 0; i < ndims; i++ ) {
		if ( i < j ) {
			out += idx[ i ].toString();
		} else {
			out += ':';
		}
		if ( i < last ) {
			out += ', ';
		}
	}
	return out;
}

/**
* Returns matrix rows as a list of arrays.
*
* @private
* @param {ndarray} x - two-dimensional ndarray
* @returns {Array<Array>} list of arrays
*/
function ndarray2rows( x ) {
	return strided2array2d( x.data, x.shape, x.strides, x.offset );
}

/**
* Appends a list of matrix rows to a provided output array.
*
* @private
* @param {Array<Array>} rows - list of rows
* @param {Array} out - output array
* @returns {Array} output array
*/
function appendRows( rows, out ) {
	var i;
	for ( i = 0; i < rows.length; i++ ) {
		out.push( rows[ i ] );
	}
	return out;
}

/**
* Returns an array representing a stacked representation header.
*
* @private
* @param {Array<number>} shape - ndarray shape
* @param {number} ncols - number of columns
* @returns {Array<string>} output array
*/
function header( shape, ncols ) {
	var out = emptyLine( ncols );
	out[ 0 ] = 'ndarray: (' + shape.join( ', ' ) + ')';
	return out;
}

/**
* Returns an array representing a stacked representation matrix section header.
*
* @private
* @param {Array<number>} idx - matrix indices
* @param {number} ncols - number of columns
* @returns {Array<string>} output array
*/
function sectionHeader( idx, ncols ) {
	var out = emptyLine( ncols );
	out[ 0 ] = '[ ' + sliceString( idx ) +' ] =';
	return out;
}


// MAIN //

/**
* Returns a stacked representation of an ndarray.
*
* @param {Object} x - input ndarray range object
* @returns {Array<Array<string>>} stacked representation of an ndarray
*
* @example
* TODO
*/
function stackedRepr( x ) {
	var shape;
	var ndims;
	var ncols;
	var out;
	var it;
	var s;

	// Handle ndarrays having fewer than 2 dimensions (i.e., non-matrices)...
	ndims = x.ndims;
	if ( ndims === 0 ) {
		return stacked0d( x );
	}
	if ( ndims === 1 ) {
		return stacked1d( x );
	}
	if ( ndims === 2 ) {
		return stacked2d( x );
	}
	// Determine the number of columns per matrix:
	shape = x.shape;
	ncols = shape[ ndims-1 ];

	// Create an iterator which iterates over each matrix in the ndarray:
	it = nditerMatrixEntries( x.ndarray );

	// Initialize the output array with a header:
	out = [
		header( shape, ncols ),
		emptyLine( ncols )
	];

	// Assemble the rest of the output array by iterating over each matrix...
	while ( true ) {
		s = it.next();
		if ( s.done ) {
			break;
		}
		out.push( sectionHeader( s.value[ 0 ], ncols ) );
		out.push( emptyLine( ncols ) );
		appendRows( ndarray2rows( s.value[ 1 ] ), out );
		out.push( emptyLine( ncols ) );
	}
	return out;
}


// EXPORTS //

module.exports = stackedRepr;
