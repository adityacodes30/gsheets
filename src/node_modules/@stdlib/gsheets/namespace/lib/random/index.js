/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils-define-read-only-property' );

var arcsine = require( '@stdlib/random-base-arcsine' ).factory;
var bernoulli = require( '@stdlib/random-base-bernoulli' ).factory;
var beta = require( '@stdlib/random-base-beta' ).factory;
var betaprime = require( '@stdlib/random-base-betaprime' ).factory;
var binomial = require( '@stdlib/random-base-binomial' ).factory;
var boxMuller = require( '@stdlib/random-base-box-muller' ).factory;
var cauchy = require( '@stdlib/random-base-cauchy' ).factory;
var chi = require( '@stdlib/random-base-chi' ).factory;
var chisquare = require( '@stdlib/random-base-chisquare' ).factory;
var cosine = require( '@stdlib/random-base-cosine' ).factory;
var discreteUniform = require( '@stdlib/random-base-discrete-uniform' ).factory;
var erlang = require( '@stdlib/random-base-erlang' ).factory;
var exponential = require( '@stdlib/random-base-exponential' ).factory;
var f = require( '@stdlib/random-base-f' ).factory;
var frechet = require( '@stdlib/random-base-frechet' ).factory;
var gamma = require( '@stdlib/random-base-gamma' ).factory;
var geometric = require( '@stdlib/random-base-geometric' ).factory;
var gumbel = require( '@stdlib/random-base-gumbel' ).factory;
var hypergeometric = require( '@stdlib/random-base-hypergeometric' ).factory;
var improvedZiggurat = require( '@stdlib/random-base-improved-ziggurat' ).factory;
var invgamma = require( '@stdlib/random-base-invgamma' ).factory;
var kumaraswamy = require( '@stdlib/random-base-kumaraswamy' ).factory;
var laplace = require( '@stdlib/random-base-laplace' ).factory;
var levy = require( '@stdlib/random-base-levy' ).factory;
var logistic = require( '@stdlib/random-base-logistic' ).factory;
var lognormal = require( '@stdlib/random-base-lognormal' ).factory;
var minstd = require( '@stdlib/random-base-minstd' ).factory;
var minstdShuffle = require( '@stdlib/random-base-minstd-shuffle' ).factory;
var mt19937 = require( '@stdlib/random-base-mt19937' ).factory;
var negativeBinomial = require( '@stdlib/random-base-negative-binomial' ).factory;
var normal = require( '@stdlib/random-base-normal' ).factory;
var pareto1 = require( '@stdlib/random-base-pareto-type1' ).factory;
var poisson = require( '@stdlib/random-base-poisson' ).factory;
var rayleigh = require( '@stdlib/random-base-rayleigh' ).factory;
var t = require( '@stdlib/random-base-t' ).factory;
var triangular = require( '@stdlib/random-base-triangular' ).factory;
var uniform = require( '@stdlib/random-base-uniform' ).factory;
var weibull = require( '@stdlib/random-base-weibull' ).factory;

var normalizeSeed = require( '@stdlib/gsheets/random/normalize-seed' );


// MAIN //

/**
* Adds APIs to a provided namespace.
*
* @private
* @param {Object} dest - destination namespace
* @returns {Object} destination namespace
*/
function namespace( dest ) {
	setReadOnly( dest, 'arcsine', arcsine );
	setReadOnly( dest, 'bernoulli', bernoulli );
	setReadOnly( dest, 'beta', beta );
	setReadOnly( dest, 'betaprime', betaprime );
	setReadOnly( dest, 'binomial', binomial );
	setReadOnly( dest, 'boxMuller', boxMuller );
	setReadOnly( dest, 'cauchy', cauchy );
	setReadOnly( dest, 'chi', chi );
	setReadOnly( dest, 'chisquare', chisquare );
	setReadOnly( dest, 'cosine', cosine );
	setReadOnly( dest, 'discreteUniform', discreteUniform );
	setReadOnly( dest, 'erlang', erlang );
	setReadOnly( dest, 'exponential', exponential );
	setReadOnly( dest, 'f', f );
	setReadOnly( dest, 'frechet', frechet );
	setReadOnly( dest, 'gamma', gamma );
	setReadOnly( dest, 'geometric', geometric );
	setReadOnly( dest, 'gumbel', gumbel );
	setReadOnly( dest, 'hypergeometric', hypergeometric );
	setReadOnly( dest, 'improvedZiggurat', improvedZiggurat );
	setReadOnly( dest, 'invgamma', invgamma );
	setReadOnly( dest, 'kumaraswamy', kumaraswamy );
	setReadOnly( dest, 'laplace', laplace );
	setReadOnly( dest, 'levy', levy );
	setReadOnly( dest, 'logistic', logistic );
	setReadOnly( dest, 'lognormal', lognormal );
	setReadOnly( dest, 'minstd', minstd );
	setReadOnly( dest, 'minstdShuffle', minstdShuffle );
	setReadOnly( dest, 'mt19937', mt19937 );
	setReadOnly( dest, 'negativeBinomial', negativeBinomial );
	setReadOnly( dest, 'normal', normal );
	setReadOnly( dest, 'pareto1', pareto1 );
	setReadOnly( dest, 'poisson', poisson );
	setReadOnly( dest, 'rayleigh', rayleigh );
	setReadOnly( dest, 't', t );
	setReadOnly( dest, 'triangular', triangular );
	setReadOnly( dest, 'uniform', uniform );
	setReadOnly( dest, 'weibull', weibull );

	dest.base = {};
	setReadOnly( dest.base, 'normalizeSeed', normalizeSeed );

	return dest;
}


// EXPORTS //

module.exports = namespace;
