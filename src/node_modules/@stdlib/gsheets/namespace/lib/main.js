/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils-define-read-only-property' );
var copy = require( '@stdlib/gsheets/object/shallow-copy' );

var bartlettTest = require( '@stdlib/stats-bartlett-test' );
var broadcastShapes = require( '@stdlib/ndarray-base-broadcast-shapes' );

var cumax = require( '@stdlib/stats-base-cumax' ).ndarray;

var filled2d = require( '@stdlib/array-base-filled2d' );
var filled2dBy = require( '@stdlib/array-base-filled2d-by' );
var flattenArray = require( '@stdlib/gsheets/array/flatten2d' );

var isArray = require( '@stdlib/assert-is-array' );
var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;
var isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;
var isPositiveNumber = require( '@stdlib/assert-is-positive-number' ).isPrimitive;
var isString = require( '@stdlib/assert-is-string' ).isPrimitive;
var iterator2array = require( '@stdlib/array-from-iterator' );
var iterSawtoothWave = require( '@stdlib/simulate-iter-sawtooth-wave' );

var linspace = require( '@stdlib/array-linspace' );

var max = require( '@stdlib/stats-base-max' ).ndarray;
var mskmax = require( '@stdlib/stats-base-mskmax' ).ndarray;

var normalizeBroadcastArgs = require( '@stdlib/gsheets/array/normalize-broadcast-args' );

var ones2d = require( '@stdlib/array-base-ones2d' );

var zeros2d = require( '@stdlib/array-base-zeros2d' );

var assert = require( './assert' );
var blas = require( './blas' );
var datasets = require( './datasets' );
var dists = require( './dists' );
var math = require( './math' );
var random = require( './random' );
var string = require( './string' );
var tools = require( './tools' );

var d_d = require( './d_d' ); // eslint-disable-line camelcase
var dd_d = require( './dd_d' ); // eslint-disable-line camelcase
var s_o = require( './s_o' ); // eslint-disable-line camelcase


// MAIN //

/**
* Returns the stdlib Google Sheets namespace.
*
* @returns {Object} namespace
*
* @example
* var ns = namespace();
* // returns {...}
*/
function namespace() {
	var ns = {};

	setReadOnly( ns, 'bartlettTest', bartlettTest );
	setReadOnly( ns, 'broadcastShapes', broadcastShapes );

	setReadOnly( ns, 'cumax', cumax );

	setReadOnly( ns, 'filled2d', filled2d );
	setReadOnly( ns, 'filled2dBy', filled2dBy );
	setReadOnly( ns, 'flattenArray', flattenArray );

	setReadOnly( ns, 'isArray', isArray );
	setReadOnly( ns, 'isBoolean', isBoolean );
	setReadOnly( ns, 'isNumber', isNumber );
	setReadOnly( ns, 'isPositiveNumber', isPositiveNumber );
	setReadOnly( ns, 'isString', isString );
	setReadOnly( ns, 'iterator2array', iterator2array );
	setReadOnly( ns, 'iterSawtoothWave', iterSawtoothWave );

	setReadOnly( ns, 'linspace', linspace );

	setReadOnly( ns, 'max', max );
	setReadOnly( ns, 'mskmax', mskmax );

	setReadOnly( ns, 'normalizeBroadcastArgs', normalizeBroadcastArgs );

	setReadOnly( ns, 'ones2d', ones2d );

	setReadOnly( ns, 'zeros2d', zeros2d );

	setReadOnly( ns, 'assert', assert );
	setReadOnly( ns, 'blas', blas );
	setReadOnly( ns, 'datasets', datasets );
	setReadOnly( ns, 'dists', dists );
	setReadOnly( ns, 'math', math );
	setReadOnly( ns, 'random', random );
	setReadOnly( ns, 'string', string );
	setReadOnly( ns, 'tools', tools );

	copy( d_d, ns );
	copy( dd_d, ns );
	copy( s_o, ns );

	return ns;
}


// EXPORTS //

module.exports = namespace;
