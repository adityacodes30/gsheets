/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var broadcastShapes = require( '@stdlib/ndarray-base-broadcast-shapes' );
var bternary2d = require( '@stdlib/gsheets/array/broadcasted-ternary2d' ); // FIXME: replace with stdlib pkg once published
var zeros2d = require( '@stdlib/array-base-zeros2d' );
var format = require( '@stdlib/string-format' );
var normalizeBroadcastArgs = require( '@stdlib/gsheets/array/normalize-broadcast-args' );
var wrap = require( '@stdlib/gsheets/math/tools/wrap-ternary' );


// VARIABLES //

var DTYPES = [ 'number', 'number', 'number' ];
var MSGS = [ 'First argument', 'Second argument', 'Third argument' ];


// MAIN //

/**
* Applies a ternary function which accepts two numbers and returns a number.
*
* @param {Array} args - function arguments
* @param {Function} fcn - ternary function to apply
* @throws {Error} unrecognized option
* @throws {Error} input arguments must be broadcast compatible
* @returns {Array<Array>} results
*
* @example
* function add( x, y, z ) {
*     return x + y + z;
* }
*
* var x = [ [ 1, 2 ] ];
* var y = [ [ 3, 4 ] ];
* var z = [ [ 5, 6 ] ];
*
* var out = ternary( [ x, y, z ], add );
* // returns [ [ 9, 12 ] ]
*/
function ternary( args, fcn ) {
	var shape;
	var opts;
	var out;
	var f;
	var o;
	var i;

	opts = {
		'nonnumeric': void 0,
		'nan': NaN,
		'pinf': Infinity,
		'ninf': -Infinity
	};
	for ( i = 3; i < args.length; i += 2 ) {
		o = args[ i ];
		if ( o === 'nonnumeric' || o === 'nan' || o === 'pinf' || o === 'ninf' ) {
			opts[ o ] = args[ i+1 ];
		} else {
			throw new Error( format( 'invalid argument. Unrecognized option name. Value: %s.', String( o ) ) );
		}
	}
	// Normalize the provided arguments so we are always working with nested arrays:
	args = normalizeBroadcastArgs( [ args[ 0 ], args[ 1 ], args[ 2 ] ], DTYPES, MSGS ); // eslint-disable-line max-len

	// Resolve the shape of the broadcasted result:
	shape = broadcastShapes( args[ 1 ] );
	if ( shape === null ) {
		throw new Error( 'invalid argument. Input arguments are not broadcast compatible.' );
	}
	// Create an output array:
	out = zeros2d( shape );

	// Wrap the lower-level function to ensure proper handling of input arguments and return values:
	f = wrap( fcn, opts );

	// Apply the function to broadcasted arrays:
	args[ 0 ].push( out );
	args[ 1 ].push( shape );
	bternary2d( args[ 0 ], args[ 1 ], f );
	return out;
}


// EXPORTS //

module.exports = ternary;
