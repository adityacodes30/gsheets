/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable stdlib/jsdoc-doctest-marker, stdlib/jsdoc-doctest-quote-props */

'use strict';

// MODULES //

var ns = require( '@stdlib/gsheets/namespace' ).CACHED;


// MAIN //

/**
* Creates a zero-filled ndarray having a specified shape.
*
* @customfunction
* @param {Range<integer>} shape - array shape
* @param {string} order - option name for specifying the ndarray memory layout
* @param {string} orderValue - order option value
* @returns {ndarray} zero-filled ndarray
*
* @example
* STDLIB_NDZEROS( { 10, 1 } )
*/
function STDLIB_NDZEROS( shape, order, orderValue ) { // eslint-disable-line no-unused-vars
	var header;
	var ndims;
	var opts;
	var arr;
	var len;
	var st;
	var d;
	var o;
	var i;

	// TODO: consider if we want to support an option specifying whether the output should be a column or a row

	opts = {
		'order': 'row-major',
		'dtype': 'generic'
	};
	for ( i = 1; i < arguments.length; i += 2 ) {
		o = arguments[ i ];
		if ( o === 'order' ) {
			opts[ o ] = arguments[ i+1 ];

			// TODO: validate order value
		} else {
			ns.assert.unrecognizedOptionName( o );
		}
	}
	ns.assert.isRange1d( shape, 'First argument' );
	shape = ns.array.flattenArray( shape );
	ns.assert.isValidShape( shape, 'First argument' );

	arr = ns.ndarray.zeros( opts.dtype, shape, opts.order );
	len = arr.length;
	ndims = shape.length;

	header = [];
	header.push( [ 'shape' ] );
	for ( i = 0; i < ndims; i++ ) {
		header.push( [ shape[i] ] );
	}
	header.push( [ 'strides' ] );
	st = arr.strides;
	for ( i = 0; i < ndims; i++ ) {
		header.push( [ st[i] ] );
	}
	header.push( [ 'offset' ] );
	header.push( [ arr.offset ] );
	header.push( [ 'order' ] );
	header.push( [ opts.order ] );
	header.push( [ 'dtype' ] );
	header.push( [ 'number' ] );
	header.push( [ 'data' ] );

	d = ns.ndarray.toArray( arr.data, [ len, 1 ], [ 1, 1 ], 0, 'row-major' );
	return header.concat( d );
}


// EXPORTS //

module.exports = STDLIB_NDZEROS;
