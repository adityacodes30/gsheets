/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable stdlib/jsdoc-doctest-marker, stdlib/jsdoc-doctest-quote-props, max-len */

'use strict';

// MODULES //

var ns = require( '@stdlib/gsheets/namespace' ).CACHED;


// MAIN //

/**
* Creates an ndarray view.
*
* @customfunction
* @param {Range} x - input ndarray
* @param {string} slice - subsequence string
* @param {string} strict - option name for specifying whether to enforce strict bounds checking
* @param {boolean} strictValue - boolean indicating whether to enforce strict bounds checking
* @param {string} view - option name for specifying whether to return a "view" of the input ndarray
* @param {boolean} viewValue - boolean indicating whether to return a "view" of the input ndarray
* @param {string} as - option name for specifying the presentation layout
* @param {string} asValue - as option value
* @returns {Range} ndarray view
*
* @example
* STDLIB_NDSLICE( A1:A100, '::-1,...,1::-2' )
*/
function STDLIB_NDSLICE( x, slice, strict, strictValue, view, viewValue, as, asValue ) { // eslint-disable-line no-unused-vars, stdlib/jsdoc-require-throws-tags
	var strides;
	var offset;
	var shape;
	var dtype;
	var order;
	var ndims;
	var vhlen;
	var opts;
	var hlen;
	var arr;
	var len;
	var tmp;
	var buf;
	var vx;
	var ih;
	var s;
	var o;
	var i;

	opts = {
		'strict': true,
		'view': false,
		'as': null
	};
	for ( i = 2; i < arguments.length; i += 2 ) {
		o = arguments[ i ];
		if ( o === 'strict' || o === 'view' || o === 'as' ) {
			opts[ o ] = arguments[ i+1 ];

			// TODO: validate strict/view/layout values
		} else {
			ns.assert.unrecognizedOptionName( o );
		}
	}
	ns.assert.isRange1d( x, 'First argument' );

	// Resolve the default presentation layout based on the presentation layout of the input array...
	if ( opts.as === null ) {
		if ( x.length === 1 && x[ 0 ].length > 1 ) {
			opts.as = 'row';
		} else {
			opts.as = 'column';
		}
	}
	x = ns.array.flatten2d( x );

	// Resolve ndarray meta data...
	ns.assert.isString( x[ 0 ], 'First range element' );
	for ( i = 0; i < x.length; i++ ) {
		o = ns.string.lowercase( x[ i ] );
		if ( o === 'shape' ) {
			i += 1;
			shape = [];
			for ( ; i < x.length; i++ ) {
				if ( !ns.assert.base.isNumber( x[ i ] ) ) {
					i -= 1;
					break;
				}
				shape.push( x[ i ] );
			}
		} else if ( o === 'strides' ) {
			i += 1;
			strides = [];
			for ( ; i < x.length; i++ ) {
				if ( !ns.assert.base.isNumber( x[ i ] ) ) {
					i -= 1;
					break;
				}
				strides.push( x[ i ] );
			}
		} else if ( o === 'offset' ) {
			i += 1;
			offset = x[ i ];
		} else if ( o === 'order' ) {
			i += 1;
			order = x[ i ];
		} else if ( o === 'dtype' ) {
			i += 1;
			dtype = x[ i ];
		} else if ( o === 'data' ) {
			i += 1;
			break;
		} else {
			throw new TypeError( 'invalid argument. First argument is not a valid ndarray. Unrecognized meta data field.' );
		}
	}
	if ( !ns.assert.base.isArray( shape ) || ( shape.length && !ns.assert.base.isNonNegativeIntegerArray( shape ) ) ) {
		throw new TypeError( 'invalid argument. First argument is not a valid ndarray. Shape must only contain nonnegative integer values.' );
	}
	ndims = shape.length;
	if ( !ns.assert.base.isArray( strides ) || ( strides.length && !ns.assert.base.isIntegerArray( strides ) ) ) {
		throw new TypeError( 'invalid argument. First argument is not a valid ndarray. Strides must only contain integer values.' );
	}
	if ( strides.length !== ndims ) {
		throw new TypeError( 'invalid argument. First argument is not a valid ndarray. Number of strides does not match the number of dimensions.' );
	}
	if ( !ns.assert.base.isNonNegativeInteger( offset ) ) {
		throw new TypeError( 'invalid argument. First argument is not a valid ndarray. Offset must be a nonnegative integer.' );
	}
	// TODO: validate order

	// TODO: validate dtype

	ns.assert.isString( slice, 'Second argument' );
	s = ns.ndarray.seq2multislice( slice, shape, true );
	if ( s.code ) {
		if ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {
			throw new TypeError( 'invalid argument. Second argument is not a valid subsequence.' );
		}
		if ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {
			throw new TypeError( 'invalid argument. Second argument is not a valid subsequence. The increment must be a non-zero integer value.' );
		}
		if ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {
			throw new TypeError( 'invalid argument. Second argument has more dimensions than the provided ndarray.' );
		}
		if ( s.code === 'ERR_SLICE_INSUFFICIENT_DIMENSIONS' ) {
			throw new TypeError( 'invalid argument. Second argument has fewer dimensions than the provided ndarray.' );
		}
		if ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {
			throw new TypeError( 'invalid argument. Second argument is not a valid subsequence. A subsequence must only contain at most one ellipsis.' );
		}
		// NOTE: the following error check must come last due to fall-through when in non-strict mode...
		if ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {
			if ( opts.strict ) {
				throw new RangeError( 'invalid argument. Second argument resolves to a slice exceeding index bounds.' );
			}
			// Repeat parsing, this time allowing for out-of-bounds slices:
			s = ns.ndarray.seq2multislice( slice, shape, false );
		}
	}

	// Calculate the header length: 6 field names + 2 fields having length rank(shape) + 3 fields having one value
	hlen = 6 + (2*ndims) + (3*1);

	// Create an ndarray view, adjusting the offset to account for the header info:
	arr = new ns.ndarray.ndarray( 'generic', x, shape, strides, offset+hlen, order );

	// Create the slice:
	vx = ns.ndarray.slice( arr, s, opts.strict, false );
	shape = vx.shape;
	ndims = shape.length;
	strides = vx.strides;
	order = vx.order;

	// Calculate the header length for the slice:
	vhlen = 6 + (2*ndims) + (3*1);

	// Revert the header info offset adjustment:
	offset = vx.offset - hlen;

	// Check whether we need to return the same data buffer as the input array...
	if ( opts.view ) {
		len = x.length;
		buf = x;

		// Check whether the number of dimensions was reduced and, if so, shift the data to account for less header info...
		if ( vhlen !== hlen ) {
			len -= hlen - vhlen;

			// Because the meta data does not consume as much memory, we need to shift the data up to ensure a compact representation...
			for ( i = 0; i < len; i++ ) {
				buf[ vhlen+i ] = buf[ hlen+i ];
			}
			// Trim off the leftover items:
			x.length = len;
		}
	}
	// Otherwise, return a fresh ndarray with data arranged contiguously...
	else {
		// Allocate a new data buffer which can accommodate the new header info and slice data:
		len = vhlen + ns.ndarray.numel( vx.length );
		buf = ns.array.zeros( len );

		// When returning a view, return elements in array iteration order...
		strides = ns.ndarray.shape2strides( shape, order );
		tmp = new ns.ndarray.ndarray( 'generic', buf, shape, strides, vhlen, order );
		for ( i = 0; i < vx.length; i++ ) {
			tmp.iset( i, vx.iget( i ) );
		}
		// Reset the index offset as the strides should all be nonnegative integers:
		offset = 0;
	}

	// Set the header info...
	ih = 0;
	buf[ ih ] = 'shape';
	ih += 1;
	for ( i = 0; i < ndims; i++ ) {
		buf[ ih ] = shape[ i ];
		ih += 1;
	}
	buf[ ih ] = 'strides';
	ih += 1;
	for ( i = 0; i < ndims; i++ ) {
		buf[ ih ] = strides[ i ];
		ih += 1;
	}
	buf[ ih ] = 'offset';
	ih += 1;
	buf[ ih ] = offset;
	ih += 1;
	buf[ ih ] = 'order';
	ih += 1;
	buf[ ih ] = order;
	ih += 1;
	buf[ ih ] = 'dtype';
	ih += 1;
	buf[ ih ] = dtype;
	ih += 1;
	buf[ ih ] = 'data';

	if ( opts.as === 'row' ) {
		return [ buf ];
	}
	// opts.as === 'column'
	return ns.ndarray.toArray( buf, [ len, 1 ], [ 1, 1 ], 0, 'row-major' ); // TODO: replace with @stdlib/array/base/equivalent
}


// EXPORTS //

module.exports = STDLIB_NDSLICE;
