/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */

/* eslint-disable stdlib/jsdoc-doctest-marker, stdlib/jsdoc-doctest-quote-props */

'use strict';

// MODULES //

var ns = require( '@stdlib/gsheets/namespace' ).CACHED;


// MAIN //

/**
* Computes the absolute value.
*
* @customfunction
* @param {Range} x - input ndarray
* @param {string} nonnumeric - option name for specifying the value to return in place of raising an exception when an input value is not a number
* @param {*} nonnumericValue - non-numeric option value
* @param {string} nan - option name for specifying the value to return in place of `NaN`
* @param {*} nanValue - `NaN` option value
* @param {string} pinf - option name for specifying the value to return in place of positive infinity
* @param {*} pinfValue - positive infinity option value
* @param {string} ninf - option name for specifying the value to return in place of negative infinity
* @param {*} ninfValue - negative infinity option value
* @param {string} as - option name for specifying the presentation layout
* @param {string} asValue - as option value
* @returns {number|Range<number>} result(s)
*
* @example
* STDLIB_ABS( A1:A100 )
*
* @example
* STDLIB_ABS( A1:A100, "nan", "", "pinf", "", "ninf", "" )
*/
function STDLIB_NDARRAY_ABS( x, nonnumeric, nonnumericValue, nan, nanValue, pinf, pinfValue, ninf, ninfValue, as, asValue ) { // eslint-disable-line no-unused-vars, max-params, max-len
	var opts;
	var args;
	var obj;
	var out;
	var o;
	var i;

	// TODO: support "slice" kwarg

	opts = {
		'as': 'column' // FIXME: infer default based on orientation of `x`
	};
	obj = ns.ndarray.range2ndarray( x );
	args = [ obj.ndarray ];
	for ( i = 1; i < arguments.length; i++ ) {
		o = arguments[ i ];
		args.push( o );
		if ( o === 'as' ) {
			opts.as = arguments[ i+1 ];

			// TODO: validate `as` option
		}
	}
	out = ns.math.tools.ndarray.unary( args, ns.math.abs );
	return ns.ndarray.ndarray2range( out.data, out.data.length, out.dtype, out.shape, out.strides, out.offset, out.order, opts.as );
}


// EXPORTS //

module.exports = STDLIB_NDARRAY_ABS;
