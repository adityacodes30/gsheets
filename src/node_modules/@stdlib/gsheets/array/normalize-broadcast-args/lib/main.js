/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;
var isString = require( '@stdlib/assert-is-string' ).isPrimitive;
var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;
var isArray = require( '@stdlib/assert-is-array' );
var format = require( '@stdlib/string-format' );


// VARIABLES //

var assert = {
	'number': isNumber,
	'string': isString,
	'boolean': isBoolean
};


// MAIN //

/**
* Normalizes values in preparation for broadcasting.
*
* @param {Array} values - values to broadcast
* @param {Array<string>} dtypes - value data types
* @param {Array<string>} msgs - error message subjects
* @throws {RangeError} input arguments must have the same length
* @throws {TypeError} invalid argument
* @returns {Array<Array>} results
*
* @example
* var values = [ [ [ 1, 2 ] ], 3 ];
* var dtypes = [ 'number', 'number' ];
* var msgs = [ 'First argument', 'Second argument' ];
*
* var out = normalize( values, dtypes, msgs );
* // returns <Array>
*
* var v = out[ 0 ];
* // returns [ [ [ 1, 2 ] ], [ [ 3 ] ] ]
*
* var sh = out[ 1 ];
* // returns [ [ 1, 2 ], [ 1, 1 ] ]
*/
function normalize( values, dtypes, msgs ) {
	var arrays;
	var shapes;
	var dt;
	var f;
	var v;
	var i;

	if ( values.length !== dtypes.length || dtypes.length !== msgs.length ) {
		throw new RangeError( 'invalid argument. Input arguments must have the same length.' );
	}
	shapes = [];
	arrays = [];
	for ( i = 0; i < values.length; i++ ) {
		v = values[ i ];
		dt = dtypes[ i ];
		f = assert[ dt ];
		if ( f( v ) ) {
			arrays.push( [ [ v ] ] );
			shapes.push( [ 1, 1 ] );
		} else if ( isArray( v ) ) {
			arrays.push( v );
			shapes.push( [ v.length, v[ 0 ].length ] );
		} else {
			throw new TypeError( format( 'invalid argument. %s must be either a %s or a range of %ss. Value: %s.', msgs[ i ], dt, dt, String( v ) ) );
		}
	}
	return [ arrays, shapes ];
}


// EXPORTS //

module.exports = normalize;
